/** Ver island finder

	1) Loop each layer
	2) Get verts in each layer
	3) Find how many mesh island exsits


	4) Test if new or old island - in old, then faces exist in all island

 */
struct VertIslandFinder_v
(
	/* construct */
	obj,

	/* required */

	/* properties */
	verts_process	= #{},
	verts_all	= #{},

	face_islands	= #(),
	verts_layers	= #(),	-- each item is BitArray of verts in layer
	verts_above	= #{},	-- store verts above last layer, or not yet iterated layers
	--verts_bellow	= #{},
	verts_processed	= #{},

	faces_processed	= #{},
	islands_all	= #(), -- store silands of verts bellow first layer, or already itearated layers
	islands_empty	= #(), -- store silands of verts bellow first layer, or already itearated layers

	empty_bitarray = #{},

	--verts_of_new_faces = #{},
	--layer_verts_processed = #{},
	--new_island = #{},

	new_islands = #(),
	joined_islands = #(),
	/* private */
	/* dependency */
	/* reference */
	/* inhered */
	layer_height,

	slow_layers = #(),

	layer_timer_start,
	layer_timer_end,

	/** GET NEW ISLANDS PER LAYER
	  *
	  * Loop each print layer and search for new this.islands_all
	  *
	  * This method is usefel up to 100k vertex count, higher vertex count is slow
	  * Use lots of RAM memory
	  *
	  * @return #( #{ verts of new this.islands_all } )
	 */
	function getNewIslandsPerLayer =
	(
		format "\n"; print "VertIslandFinder_v.getNewIslandsPerLayer()"

		format "verts_process.numberSet: %\n" verts_process.numberSet
		--format "layers_count: %\n" layers_count
		--verts_processed = #{}

		this.empty_bitarray += verts_all * #{}

		this.verts_processed += verts_all * #{}

		faces_processed = #{1..( polyop.getNumFaces obj )} * #{}

		if verts_above.isEmpty then
			verts_above = copy verts_all

		layers_with_verts = for layer_index = 1 to verts_layers.count where classOf ( verts_in_layer = verts_layers[layer_index] ) == BitArray collect layer_index -- layer has not verts if item is integer ( layer number )

		used_layers_count = layers_with_verts.count

		all_layers_timer = timeStamp()

		for i = 1 to layers_with_verts.count do
		--for layer in layers_with_verts do -- layer has not verts if item is integer ( layer number )
		(
			--format "layer: %\n" layer
			--format "\n==============================\nlayer: %\n" layer
			if mod i 50 == 0 then
				format "layer: % of: %\n" i used_layers_count

			layer = layers_with_verts[i]

			/* GET VERTS IN LAYER */
			verts_in_layer = verts_layers[layer]
		--	format "verts_in_layer: %\n" verts_in_layer
			/* REMOVE VERTS FORM CURENT LAYER FROM VERTS ABOVE */
			verts_above  -= verts_in_layer

			/* GET ALL FACES IN LAYER */
			faces_in_layer = polyop.getFacesUsingVert obj verts_in_layer

			/* GET ONLY NEW FACES IN LAYER - avoid repetion of faces across layers */
			new_faces_in_layer = faces_in_layer - faces_processed


			this._getIslandByPreciseMethod(verts_in_layer)(new_faces_in_layer)


			--joined_islands	= #()
			--
			--islands_all_count = islands_all.count
			--
			--for face in new_faces_in_layer do
			--(
			--	--format "face: %\n" face
			--	--format "islands_all_count: %\n" islands_all_count
			--	merged = false
			--
			--	--joined_islands_face	= #()
			--
			--	verts_of_face	= polyop.getVertsUsingFace obj face
			--
			--	for i = 1 to islands_all_count where not ( islands_all[i] * verts_of_face ).isEmpty  do
			--	(
			--		this.islands_all[i] += verts_of_face
			--
			--		append joined_islands i
			--
			--		merged = true
			--	)
			--
			--	if not merged then
			--	(
			--		append this.new_islands verts_of_face
			--
			--		append this.islands_all (this.empty_bitarray + verts_of_face)
			--
			--		islands_all_count += 1
			--	)
			--	--else
			--		--join joined_islands joined_islands_face
			--)



			--if joined_islands.count > 1 then
				--this._mergeIslands(makeUniqueArray joined_islands)

			--this.islands_all = this._mergeBitArraysbySharedBits(this.islands_all)


			faces_processed += faces_in_layer
			verts_processed += verts_in_layer


			gc light:true

		)

		format "\n------\n\n"
		format "ALL_LAYERS_TIMER: % seconds\n" ((( timeStamp()) - all_layers_timer) / 1000.0)
		format "islands_all.count: %\n" islands_all.count

		--this._setVertexColorToNewIslands()

		format "slow_layers: %\n" slow_layers

		--garbage_collection = timeStamp()

		--gc light:true
		gc()
		--gc delayed:true
		--format "garbage_collection: % seconds\n" ((( timeStamp()) - garbage_collection) / 1000.0)


		this.new_islands --return
	),







	/** Ge island by precise methods
	 */
	function _getIslandByPreciseMethod verts_in_layer new_faces_in_layer =
	(
		--format "\n"; print "VertIslandFinder_v.geIslandByPrecciseMwthods()"
			/* GET VERTS OF NEW FACES IN LAYER */
			verts_of_new_faces = ( polyop.getVertsUsingFace obj new_faces_in_layer ) * verts_in_layer

			/* JOIN NEW FACES TO ALL ISLANDS */
			joined_islands = this._joinVertsToIslands(verts_of_new_faces)
			--format "islands_all: %\n" this.islands_all
			--format "islands_all.count: %\n" this.islands_all.count

			--islands_before = this.islands_all.count
			--islands_merged = this.islands_all.count

			if joined_islands.count > 1 then
				this._mergeIslands(joined_islands)

			else
				for verts_island in this.islands_all where (verts_island * verts_processed ).isEmpty do
					append this.new_islands (verts_island * verts_in_layer)
	),


	/** A) Join face to face island if they share vertices
	  * B) Create new island
	  *
	  * Face is described by its vertices
	  *
	  * @return array
	 */
	function _joinVertsToIslands verts_of_new_faces =
	(
	--	format "\n"; print "VertIslandFinder_v.joinVertsToIslands()"


		joined_islands	= #()

		layer_verts_processed	= #{}

		--find_islands_counter = 0

		vert = ( verts_of_new_faces as Array )[1]

		islands_all_sliced = for i = 1 to this.islands_all.count collect this.islands_all[i] - verts_above

		--getFacesUsingVert = polyop.getFacesUsingVert
		--getVertsUsingFace = polyop.getVertsUsingFace

		while not verts_of_new_faces.isEmpty do
		(
			--find_islands_counter += 1

			merged = false

			faces_of_vert	= polyop.getFacesUsingVert obj vert
			--
			verts_of_faces	= polyop.getVertsUsingFace obj faces_of_vert

			--faces_of_vert	= getFacesUsingVert obj vert
			--
			--verts_of_faces	= getVertsUsingFace obj faces_of_vert

			verts_of_faces_sliced = verts_of_faces - verts_above

			--for i = 1 to this.islands_all.count where ( islands_all_sliced[i] * verts_of_faces_sliced ).numberSet > 1  do
			for i = 1 to this.islands_all.count where not merged and ( islands_all_sliced[i] * verts_of_faces_sliced ).numberSet > 1  do
			(
				merged = true

				this.islands_all[i] += verts_of_faces

				islands_all_sliced[i] += verts_of_faces_sliced

				append joined_islands i
			)

			if not merged then
			(
				append this.islands_all verts_of_faces

				append islands_all_sliced verts_of_faces_sliced

				--gc light:true
			)

			verts_of_new_faces	-= verts_of_faces
			--layer_verts_processed	+= verts_of_faces
			--
			--next_verts = verts_of_faces_sliced - layer_verts_processed
			--
			--vert =  if not next_verts.isEmpty then
			--	(next_verts as Array )[1] -- get vert of neibrhor face
			--else
			--	(verts_of_new_faces as Array )[1] -- get any next vert from layer

			vert = (verts_of_new_faces as Array )[1] -- get any next vert from layer
		)

		joined_islands --return
	),

	/** Merge islands
	 */
	function _mergeIslands island_indexes =
	(
		--format "\n"; print "VertIslandFinder_v._mergeIslands()"

		sort island_indexes

		first_island = island_indexes[1]

		island_indexes = deleteItem island_indexes 1
		--format "island_indexes: %\n" island_indexes

		indexes_reversed = for i = island_indexes.count to 2 by -1 collect island_indexes[i]

		for island_to_merge in indexes_reversed where (this.islands_all[first_island] * this.islands_all[island_to_merge]).numberSet > 1 do
		--for island_to_merge in deleteItem island_indexes 1 do
		(
			--format "island_to_merge: %\n" island_to_merge
			this.islands_all[first_island] += this.islands_all[island_to_merge]

			deleteItem islands_all island_to_merge
		)

	),

	/** Merge bit arrays wich shared bits
	  *
	  * @param #( #{} ) bitarrays Array of bittarays
	 */
	function _mergeBitArraysbySharedBits bitarrays =
	(

		--format "\n"; print ".mergeBitArraysTest2()"

		for x = bitarrays.count to 1 by -1 do
		(
			merged = false

			for y = bitarrays.count to 1 by -1 where x != y and not ( bitarrays[x] * bitarrays[y] ).isEmpty do
			--for y = bitarrays.count to 1 by -1 where x != y and ( bitarrays[x] * bitarrays[y] ).numberSet > 1 do
			(
				bitarrays[y] += bitarrays[x]

				merged = true
			)

			if merged then
				deleteItem bitarrays x
		)

		bitarrays --return
	),


	/** Set vertex color to new islands
	 */
	function _setVertexColorToNewIslands =
	(
		--format "\n"; print "VertIslandFinder_v.setVertexColorToNewIslands()"
		obj.showVertexColors	= true
		obj.vertexColorsShaded	= true

		polyop.setVertColor obj.baseobject 0 this.verts_all white

		--for merged_island in merged_islands do
		--(
		--	format "merged_island: %\n" merged_island
		--
		--	polyop.setVertColor obj.baseobject 0 (merged_island) green
		--)


		for new_island in this.new_islands  do
		--for new_island in this.new_islands  do
		(
			polyop.setVertColor obj.baseobject 0 (new_island) red

			--this._getCenterOfIsland (new_island)
		)

	),

	/**
	 */
	on create do
	(
		--format "\n"; print "VertIslandFinder.onCreate()"
		--for prop in #(  ) where getProperty this prop == undefined do -- CHECK CONSTRUCT PROPERTIES -- Array of this struct properties necessary to run
		--	throw ("\n\n\nUNDEFINED CONSTRUCT PROPERTY\n\n\nSTRUCT:\n\n"+ ((filterString( classof this as string )"(:")[2]) +"\n\n\nPROPERTY:\n\n"+ prop )
	)

)
